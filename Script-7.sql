---------------------------------------------
---- 상품 관리

-- 1. BANKBOOK (통장 상품)

CREATE TABLE BANKBOOK (
   BANKBOOK_NUM NUMBER,
   BANKBOOK_NAME VARCHAR2(200) NOT NULL,
   INTEREST_RATE NUMBER(3,1) NOT NULL,
   BANKBOOK_DETAIL CLOB,
   SALE_CHECK NUMBER(1) NOT NULL
);

SELECT * FROM BANKBOOK;
DROP TABLE BANKBOOK;
DELETE BANKBOOK;

ALTER TABLE BANKBOOK ADD CONSTRAINT B_BN_PK PRIMARY KEY (BANKBOOK_NUM);
ALTER TABLE BANKBOOK ADD CONSTRAINT B_SC_C CHECK (SALE_CHECK IN (0, 1));

-- SEQUNCE

CREATE SEQUENCE BANKBOOK_SEQ
START WITH 1;

DROP SEQUENCE BANKBOOK_SEQ;

-- 2. ACCOUNT (계좌)

CREATE TABLE ACCOUNT (
   SERIAL_NUM NUMBER,
   MEMBER_NUM NUMBER,
   BANKBOOK_NUM NUMBER,
   ACCOUNT_NUM VARCHAR2(200),
   OPEN_DATE DATE,
   BALANCE NUMBER
);

SELECT * FROM ACCOUNT;
DROP TABLE ACCOUNT;

ALTER TABLE ACCOUNT ADD CONSTRAINT A_SN_PK PRIMARY KEY (SERIAL_NUM);
ALTER TABLE ACCOUNT ADD CONSTRAINT A_AN_U UNIQUE (ACCOUNT_NUM);
-- FK
ALTER TABLE ACCOUNT ADD CONSTRAINT A_MN_FK FOREIGN KEY (MEMBER_NUM) REFERENCES MEMBER (MEMBER_NUM);
ALTER TABLE ACCOUNT ADD CONSTRAINT A_PN_FK FOREIGN KEY (BANKBOOK_NUM) REFERENCES BANKBOOK (BANKBOOK_NUM);

-- SEQUENCE

CREATE SEQUENCE ACCOUNT_SEQ
START WITH 1;

DROP SEQUENCE ACCOUNT_SEQ;

-- 3. BANKING (은행 업무)

CREATE TABLE BANKING (
   SERIAL_NUM NUMBER,
   BANKING_DATE DATE,
   BANKING_CHECK NUMBER(1) NOT NULL,
   TRANSFER NUMBER NOT NULL
);

SELECT * FROM BANKING;
DROP TABLE BANKING;

ALTER TABLE BANKING ADD CONSTRAINT B_BC_C CHECK (BANKING_CHECK IN (0, 1));
-- FK
ALTER TABLE BANKING ADD CONSTRAINT B_SN_FK FOREIGN KEY (SERIAL_NUM) REFERENCES ACCOUNT (SERIAL_NUM);

---------------------------------------------
---- 회원 관리

-- 1. MEMBER (회원)

CREATE TABLE MEMBER (
	MEMBER_ID VARCHAR2(200),
	MEMBER_PW VARCHAR2(200),
	MEMBER_NAME VARCHAR2(200),
	MEMBER_ADDRESS VARCHAR2(200),
	MEMBER_PHONE VARCHAR2(200),
	MEMBER_EMAIL VARCHAR2(200)
);

SELECT * FROM MEMBER;
DROP TABLE MEMBER;
DELETE MEMBER;

ALTER TABLE MEMBER ADD CONSTRAINT M_MI_PK PRIMARY KEY (MEMBER_ID);
ALTER TABLE MEMBER ADD CONSTRAINT M_MP_U UNIQUE (MEMBER_PHONE);
ALTER TABLE MEMBER ADD CONSTRAINT M_ME_U UNIQUE (MEMBER_EMAIL);

-- SEQUENCE

CREATE SEQUENCE MEMBER_SEQ
START WITH 1;

DROP SEQUENCE MEMBER_SEQ;

-- 2. MEMBER ROLE (회원 권한)

CREATE TABLE MEMBER_ROLE (
   ROLE_NUM NUMBER,
   MEMBER_ID VARCHAR2(200)
);

SELECT * FROM MEMBER_ROLE;
DROP TABLE MEMBER_ROLE;

-- FK
ALTER TABLE MEMBER_ROLE ADD CONSTRAINT MR_RN_FK FOREIGN KEY (ROLE_NUM) REFERENCES ROLE (ROLE_NUM);
ALTER TABLE MEMBER_ROLE ADD CONSTRAINT MR_MI_FK FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID);

-- 3. ROLE (권한)

CREATE TABLE ROLE (
   ROLE_NUM NUMBER,
   ROLE_NAME VARCHAR2(200) NOT NULL
);

SELECT * FROM ROLE;
DROP TABLE ROLE;

ALTER TABLE ROLE ADD CONSTRAINT R_RN_PK PRIMARY KEY (ROLE_NUM);

---------------------------------------------
---------------------------------------------
-- 1. 상품 정보 2개 입력

INSERT INTO BANKBOOK
VALUES (BANKBOOK_SEQ.NEXTVAL, 'OO통장', 2.6, '좋은 통장', '0');

INSERT INTO BANKBOOK
VALUES (BANKBOOK_SEQ.NEXTVAL, 'XX통장', 4.1, '엄청 좋은 통장', '1');

-- 2. ROLE 정보 입력

INSERT INTO ROLE
VALUES (1, '관리자');

INSERT INTO ROLE
VALUES (2, '회원');

-- 3. 회원 2명 입력 (MEMBER_ROLE)

INSERT INTO MEMBER
VALUES (MEMBER_SEQ.NEXTVAL, 'a', '010-1111-1111');

INSERT INTO MEMBER
VALUES (MEMBER_SEQ.NEXTVAL, 'b', '010-1111-1112');

INSERT INTO MEMBER_ROLE
VALUES (2, 1);

INSERT INTO MEMBER_ROLE
VALUES (2, 2);

-- 4. 회원의 정보와 역할 출력

SELECT M.MEMBER_NAME, M.MEMBER_PHONE, R.ROLE_NAME
FROM MEMBER M
   INNER JOIN
   MEMBER_ROLE MR
USING (MEMBER_NUM)
   INNER JOIN
   ROLE R
USING (ROLE_NUM);

-- 5. 회원 한 명당 상품 2개 가입

INSERT INTO ACCOUNT
VALUES (ACCOUNT_SEQ.NEXTVAL, 1, 1, '111-111-111111', SYSDATE);

INSERT INTO ACCOUNT
VALUES (ACCOUNT_SEQ.NEXTVAL, 1, 2, '222-222-222222', SYSDATE);

--

INSERT INTO ACCOUNT
VALUES (ACCOUNT_SEQ.NEXTVAL, 2, 1, '333-333-333333', SYSDATE);

INSERT INTO ACCOUNT
VALUES (ACCOUNT_SEQ.NEXTVAL, 2, 2, '444-444-444444', SYSDATE);

-- ★6. 가입한 계좌 번호, 상품명, 이자율과 총 잔액 출력

SELECT SUM(TRANSFER) AS BALANCE, 
FROM BANKING
WHERE SERIAL_NUM = 1;

SELECT A.ACCOUNT_NUM, BB.BANKBOOK_NAME, BB.INTEREST_RATE, A.TRANSFER
FROM ACCOUNT A
   INNER JOIN
   BANKBOOK BB
USING (BANKBOOK_NUM)
   INNER JOIN
   BANKING B
USING (SERIAL_NUM)
WHERE MEMBER_NUM = 1;

-- 7. 특정 상품에 가입한 총 회원 수 출력

SELECT COUNT(M.MEMBER_NAME) AS MEMBER_COUNT
FROM ACCOUNT A
   INNER JOIN
   BANKBOOK BB
USING (BANKBOOK_NUM)
   INNER JOIN
   MEMBER M
USING (MEMBER_NUM)
WHERE BANKBOOK_NUM = 1;

-- 8. 특정 상품의 총 금액

SELECT SUM(B.TRANSFER)
FROM BANKING B
   INNER JOIN
   ACCOUNT A
USING (SERIAL_NUM)
   INNER JOIN
   BANKBOOK BB
USING (BANKBOOK_NUM)
WHERE BANKBOOK_NUM = 1;

-- 9. 각 계좌별로 입금 -> 출금 -> 입금 -> 출금 순서대로 정보 입력

-- (1)
INSERT INTO BANKING
VALUES (1, SYSDATE, 0, 10000);

INSERT INTO BANKING
VALUES (1, SYSDATE, 1, -5000);

INSERT INTO BANKING
VALUES (1, SYSDATE, 0, 20000);

INSERT INTO BANKING
VALUES (1, SYSDATE, 1, -7000);

-- (2)
INSERT INTO BANKING
VALUES (2, SYSDATE, 0, 20000);

INSERT INTO BANKING
VALUES (2, SYSDATE, 1, -11000);

INSERT INTO BANKING
VALUES (2, SYSDATE, 0, 50000);

INSERT INTO BANKING
VALUES (2, SYSDATE, 1, -8000);

-- (3)
INSERT INTO BANKING
VALUES (3, SYSDATE, 0, 110000);

INSERT INTO BANKING
VALUES (3, SYSDATE, 1, -50000);

INSERT INTO BANKING
VALUES (3, SYSDATE, 0, 10000);

INSERT INTO BANKING
VALUES (3, SYSDATE, 1, -52000);

-- (4)
INSERT INTO BANKING
VALUES (4, SYSDATE, 0, 7000);

INSERT INTO BANKING
VALUES (4, SYSDATE, 1, -500);

INSERT INTO BANKING
VALUES (4, SYSDATE, 0, 1000);

INSERT INTO BANKING
VALUES (4, SYSDATE, 1, -5200);

-- 10. 특정 회원의 특정 계좌로 입금과 출금 날짜순으로 출력 (최신순)

SELECT B.TRANSFER, B.BANKING_DATE
FROM BANKING B
   INNER JOIN
   ACCOUNT A
USING (SERIAL_NUM)
WHERE SERIAL_NUM = 1
ORDER BY BANKING_DATE DESC;

-- 11. 특정 회원의 특정 계좌 입금만 날짜순 출력

SELECT B.TRANSFER, B.BANKING_DATE
FROM BANKING B
   INNER JOIN
   ACCOUNT A
USING (SERIAL_NUM)
WHERE SERIAL_NUM = 1 AND BANKING_CHECK = 0
ORDER BY BANKING_DATE DESC;

-- 12. 특정 회원의 특정 계좌 출금만 날짜순 출력
SELECT B.TRANSFER, B.BANKING_DATE
FROM BANKING B
   INNER JOIN
   ACCOUNT A
USING (SERIAL_NUM)
WHERE SERIAL_NUM = 1 AND BANKING_CHECK = 1
ORDER BY BANKING_DATE DESC;

-- 6, 8 반복 (잔액, 총 금액 변경)

---------------------------------------------

SELECT * FROM USER_CONSTRAINTS;
PURGE RECYCLEBIN;

COMMIT;
ROLLBACK;
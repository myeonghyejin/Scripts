SELECT * FROM tab;

-- 국가 정보
SELECT * FROM COUNTRIES;

-- 부서 정보
SELECT * FROM DEPARTMENTS;

-- 직원 정보
SELECT * FROM EMPLOYEES;

-- 직업 정보
SELECT * FROM JOBS;

-- 경력 정보
SELECT * FROM JOB_HISTORY;

-- 위치 정보
SELECT * FROM LOCATIONS;

-- 대륙 정보
SELECT * FROM REGIONS;



-------------------------------------------------



SELECT * 
FROM LOCATIONS;

SELECT CITY, POSTAL_COMDE
FROM LOCATIONS;

SELECT *
FROM EMPLOYEES;

--사원의 성, 이름, 월급, 일사일
SELECT LAST_NAME, FIRST_NAME, SALARY, SALARY*12 AS "YEAR SALARY", (SALARY*12)-5000 SAL, HIRE_DATE 입사날짜
FROM EMPLOYEES;

-- 함수 호출
SELECT SUM(SALARY)/COUNT(EMPLOYEE_ID), AVG(SALARY)  
FROM EMPLOYEES;

-- 중복 제거
SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES;

SELECT CTATE_PROVINCE || '의 도시명은' || CITY
FROM LOCATIONS;

--- WHERE
SELECT FIRST_NAME, SALARY, DEPARTMENT_ID  
FROM EMPLOYEES
WHERE DEPARTEMENT_ID = 90;

-- 사원의 정보 중 사원의 ID, 직급, 입사일, 월급
-- 월급이 15000 이상인 사원만 출력
SELECT EMPLOYEE_ID, JOB_ID, HIRE_DATE, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 8000 AND DEPARTMENT_ID = 100;

-- error
SELECT EMPLOYEE_ID, JOB_ID, HIRE_DATE, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > AVG(SALARY);

SELECT *
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

SELECT *
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

-- 사원의 모든 정보
-- 급여가 8000 이상 15000 이하
SELECT *
FROM EMPLOYEES
WHERE 8000 <= SALARY AND SALARY <= 15000;

-- BETWEEN
SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 8000 AND 15000;

-- 사원의 모든 정보
-- 부서 번호가 60번이나 100번인 사원들
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60 OR DEPARTMENT_ID = 100;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (60, 100);

-- 사원의 모든 정보, 이름이 Austin
SELECT *
FROM EMPLOYEES
WHERE LAST_NAME = 'Austin';

-- 사원의 모든 정보, 2004년 1월 1일 이후 입사한 사원들
SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE >= '2004-01-01';

SELECT *
FROM EMPLOYEES 
WHERE LAST_NAME LIKE '%K%';

-- 사원의 급여 순으로
SELECT LAST_NAME, SALARY
FROM EMPLOYEES
ORDER BY 2 DESC, 1 ASC;

-- LAST_NAME으로 오름차순
SELECT LAST_NAME, SALARY
FROM EMPLOYEES
ORDER BY LAST_NAME ASC;

-- 사원의 모든 정보, 입사 순으로
SELECT *
FROM EMPLOYEES
ORDER BY HIRE_DATE ASC;



----------------------------------------------------



-- 1. 사원정보(Employees) 테이블에서 사원번호, 이름, 급여, 업무, 입사일, 상사의 사원번호를 출력
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, JOB_ID, HIRE_DATE, MANAGER_ID
FROM EMPLOYEES;

-- 2. 사원정보(Employees) 테이블에서 사원의 이름, 성, 급여와  연봉에 $100 보너스를 추가하여 계산한 값은 Increased Ann_Salary,
--    급여에 $100 보너스를 추가하여 계산한 연봉은 Increased Salary라는 별칭을 붙여 출력
SELECT FIRST_NAME, LAST_NAME, SALARY, SALARY*12, (SALARY*12)+100 AS "Increased Ann_Salary", (SALARY+100)*12 AS "Increased Salary"
FROM EMPLOYEES;

-- 3. 예산 편성 문제로 급여 정보 보고서를 작성하려고 한다. 
--	  사원정보(Employees) 테이블에서 급여가 $7,000~$10,000 범위 이외인 사람의 이름과 성 및 급여를 급여가 적은 순서로 출력
SELECT FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY NOT BETWEEN 7000 AND 10000
ORDER BY SALARY ASC;

-- 4. 사원의 성(last_name) 중에 ‘e’ 및 ‘o’ 글자가 포함된 사원을 출력
SELECT *
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%e%' AND LAST_NAME LIKE '%o%';

-- 5. 급여(salary)와 수당율(commission_pct)에 대한 지출 보고서를 작성하려고 한다. 
--    수당을 받는(null이 아닌) 모든 사원의 이름과 성, 급여, 업무, 수당율을 출력하시오. 
--    이때 급여가 큰 순서대로 정렬하되, 급여가 같으면 수당율이 큰 순서대로 정렬
SELECT FIRST_NAME, LAST_NAME, SALARY, JOB_ID, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC;


----
-- 100번 부서에 근무하는 사원들의 평균 급여와, 그 부서에 급여 중 제일 많이 받는 사람, 제일 적게 받는 금액 출려 (총 3개)
SELECT AVG(SALARY), MAX(SALARY, MIN(SALARY)
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100;

-- 부서별
-- 평균 급여, 큰 금액, 적은 금액 출력
-- 부서 평균 급여가 10000 이상
SELECT AVG(SALARY), MAX(SALARY, MIN(SALARY)
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL:
GROUP=P BY "DEPARTMENT = ID";
HAVING AVG(SALARY) < 10000;
ORDER BY 2 ec;



-- 매니저별 사원 수
SELECT COUNT(EMPLOYEE_ID)
FROM EMPLOYEES;
WHERE MANAGER_ID IS NUlly
-- WHERE MANAGER-ID iD os NOT NULL 
GROUP BY MANNAGER_;
HAVING MANAGER_ID IS NOT NULL;

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID = 20;

SELECT *  FROM LOCATIONS  WHERE STREET_ADDRESS LIKE '%c%';

-------------------------INSERT---------------------------

-- 1. INSERT INTO 테이블명 (컬럼1, 컬럼2, ...) VALUES (값1, 값2, ...)
SELECT * FROM REGIONS;

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES (5, 'Test');

INSERT INTO REGIONS (REGION_NAME, REGION_ID)
VALUES ('Test2', 6);

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES (7, null);

INSERT INTO REGIONS (REGION_ID)
VALUES (8);

-- 개수를 맞춰야 함
-- error
-- INSERT INTO REGIONS (REGION_ID, REGION_NAME)
-- VALUES (9);

-- error
-- INSERT INTO REGIONS (REGION_ID, REGION_NAME)
-- VALUES (NULL, NULL);

INSERT INTO REGIONS 
VALUES (9, 'Test3');

INSERT INTO REGIONS
VALUES (10, NULL);

-- error
-- INSERT INTO REGIONS 
-- VALUES (11);

-------------------------DELETE---------------------------
DELETE REGIONS WHERE REGION_ID = 5;

DELETE REGIONS WHERE REGION_ID = 7 OR REGION_ID = 8 OR REGION_ID = 10;
DELETE REGIONS WHERE REGION_ID IN (7, 8, 10);
DELETE REGIONS WHERE REGION_NAME IS NULL;

DELETE REGIONS WHERE REGION_NAME LIKE '%Test%' 

SELECT * FROM COUNTRIES
INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
VALUES ('ZZ', 'Test', 2);

-- error
-- INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
-- VALUES ('ZA', 'Test2', 10);

-- error
-- DELETE REGIONS WHERE REGION_ID=2;

SELECT * FROM DEPARTMENTS;

SELECT * FROM SEQ;

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
VALUES (DEPARTMENTS_SEQ.NEXTVAL, 'Test', NULL, 1700)

-------------------------UPDATE---------------------------
SELECT * FROM DEPARTMENTS;

UPDATE DEPARTMENTS SET MANAGER_ID = 200 WHERE DEPARTMENT_ID = 120;
UPDATE DEPARTMENTS SET DEPARTMENT_NAME = 'ITTest', MANAGER_ID = NULL
WHERE DEPARTMENT_ID = 290;

-------------------------Function---------------------------
-- 1. 그룹 함수
SELECT 1+1
FROM DUAL;

-- SUM
SELECT SALARY FROM EMPLOYEES;
-- error : SELECT SALARY, SUM(SALARY) FROM EMPLOYEES;
SELECT SUM(SALARY), AVG(SALARY) FROM EMPLOYEES;
SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES;
SELECT SUM(COMMISSION_PCT), AVG(COMMISSION_PCT), COUNT(COMMISSION_PCT) FROM EMPLOYEES;
SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(COMMISSION_PCT) FROM EMPLOYEES;
SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES;

SELECT MAX(SALARY), MIN(SALARY) FROM EMPLOYEES;

SELECT MIN(HIRE_DATE), MAX(HIRE_DATE) FROM EMPLOYEES;
SELECT MAX(LAST_NAME), MIN(HIRE_DATE) FROM EMPLOYEES;
-- SELECT AVG(HIRE_DATE) FROM EMPLOYEES;

-- 2. 단일 함수
-- NULL 함수
SELECT * FROM DEPARTMENTS;
SELECT DEPARTMENT_NAME, NVL(MANAGER_ID, 200)
FROM DEPARTMENTS;

SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(COMMISSION_PCT)  
FROM EMPLOYEES;

SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID),AVG(NVL(COMMISSION_PCT))  
FROM EMPLOYEES;

SELECT DEPARTMENT_NAME, NVL2(MANAGER_ID, 100, 200)
FROM DEPARTMENTS;

-- 숫자 함수
SELECT ABS(-2.3) FROM DUAL;
SELECT FLOOR(3.123) FROM DUAL;
SELECT ROUND(35.723, -1) FROM DUAL;

-- 문자 함수
SELECT DEPARTMENT_ID , UPPER((DEPARTMENT_NAME) 
FROM DEPARTMENTS;

SELECT RPAD('abc', 10, '*') FROM DUAL;
SELECT LPAD('abc', 10, '%') FROM DUAL;

-- 'myData'
-- m*****
SELECT RPAD(SUBSTR('myData', 1, 1), LENGTH('myData'), '*') FROM DUAL;

SELECT EMPLOYEE_ID, RPAD(SUBSTR(FIRST_NAME, 0, 1), LENGTH(FIRST_NAME), '*') FROM EMPLOYEES;

-- 날짜 함수
SELECT SYSDATE, SYSTIMESTAMP, CURRENT_DATE, CURRENT_TIMESTAMP FROM DUAL;

SELECT SYSDATE, SYSDATE+3, SYSDATE-2 FROM DUAL;

SELECT ADD_MONTHS(SYSDATE, -1) FROM DUAL;

SELECT FLOOR(MONTHS_BETWEEN(SYSDATE, HIRE_DATE))
FROM EMPLOYEES;

SELECT NEXT_DAY(SYSDATE, '수') FROM DUAL; 
SELECT NEXT_DAY(SYSDATE, 4) FROM DUAL; 

SELECT LAST_DAY(SYSDATE) FROM DUAL; 

-- TO_CHAR
SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY/MM/DD DAY') FROM DUAL;

SELECT TO_CHAR(1234, '9999') FROM DUAL;

-- TO_NUMBER = parseInteger
SELECT TO_NUMBER('123')*2 FROM DUAL;
SELECT TO_NUMBER('1,234', '9,999')*2 FROM DUAL;
SELECT TO_NUMBER('1.23')*2 FROM DUAL;

-- TO_DATE
SELECT TO_DATE('2022/3/12') FROM DUAL;

--------------------------------------------------------
SELECT * FROM EMPLOYEES;

-- LAST_NAME King이 근무하는 부서명
SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE LAST_NAME = 'King';

SELECT DEPARTMENT_NAME
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 90;

SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID IN (
	(SELECT DEPARTMENT_ID 
	FROM EMPLOYEES
	WHERE LAST_NAME = 'King'
	)
);

-- SubQuery
SELECT REGION_NAME FROM REGIONS WHERE REGION_ID = 
(SELECT REGION_ID FROM COUNTRIES WHERE COUNTRY_ID = 
(SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID = 
(SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 
(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME ='Austin'))));

SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 
(
SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE LAST_NAME = 'Austin');

-- 평균 급여보다 많이 받는 사원들의 정보
SELECT *
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);

-- FIRST_NAME John의 관리자의 FIRST_NAME 찾기
SELECT FIRST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID =
	(
	SELECT MANAGER_ID
	FROM EMPLOYEES
	WHERE FIRST_NAME = 'Lex'
	);

-- 사원들 중에서 급여를 제일 많이 받는 사원과 같은 부서에 근무하는 사원들의 평균 급여
SELECT AVG(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID =
	(
	SELECT DEPARTMENT_ID
	FROM EMPLOYEES
	WHERE SALARY = 
		(
		SELECT MAX(SALARY)
		FROM EMPLOYEES
		)
	)
;

-- 신입사원 이름, 가장 오래된 사원의 이름
SELECT 'A', 'B'
SELECT 
	(SELECT LAST_NAME FROM EMPLOYEES WHERE HIRE_DATE =
		(SELECT MAX(HIRE_DATE) FROM EMPLOYEES)
	),	
	(SELECT LAST_NAME FROM EMPLOYEES WHERE HIRE_DATE =
		(SELECT MIN(HIRE_DATE) FROM EMPLOYEES)
	)
FROM DUAL;

SELECT * FROM REGIONS;
INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES ((SELECT MAX(REGION_ID)+1 FROM REGIONS), 'Space');

SELECT A.SALARY*2 FROM
(SELECT LAST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES) A;

-- 도시명이 시애틀에 근무하는 사원들의 모든 정보를 출력
SELECT LOCATION_ID
FROM LOCATIONS
WHERE CITY = 'Seattle';

SELECT DEPARTMENT_ID, DEPARTMENT_NAME 
FROM DEPARTMENTS
WHERE LOCATION_ID = 1700;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (10, 30, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270);

----------------------------------------------------------------------
-- SubQuery 실습
-- 1. 사번이 198인 사원이 근무하는 부서가 있는 도시가 속해 있는 나라가 있는 대륙 정보
SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 198;

SELECT LOCATION_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 50;

SELECT COUNTRY_ID 
FROM LOCATIONS
WHERE LOCATION_ID = 1500;

SELECT REGION_ID 
FROM COUNTRIES
WHERE COUNTRY_ID = 'US';

SELECT REGION_NAME
FROM REGIONS
WHERE REGION_ID = 2;

----------

SELECT REGION_NAME FROM REGIONS WHERE REGION_ID =
(SELECT REGION_ID FROM COUNTRIES WHERE COUNTRY_ID =
(SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID =
(SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID =
(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 198))));

-- 2. LAST_NAME이 Khoo 인 사람의 근무하는 부서명
SELECT DEPARTMENT_ID
FROM EMPLOYEES
WHERE LAST_NAME = 'Khoo';

SELECT DEPARTMENT_NAME
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 30;

---------

SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID =
(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'Khoo');

-- 3. 사원번호가 199번인 사원의 매니저가 근무하는 부서가 있는 나라명 출력
SELECT MANAGER_ID 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 199;

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 124;

SELECT LOCATION_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 50;

SELECT COUNTRY_ID 
FROM LOCATIONS
WHERE LOCATION_ID = 1500;

SELECT COUNTRY_NAME
FROM COUNTRIES
WHERE COUNTRY_ID = 'US';

----------------

SELECT COUNTRY_NAME FROM COUNTRIES WHERE COUNTRY_ID =
(SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID =
(SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID =
(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID =
(SELECT MANAGER_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 199))));

-- 4. 사원들 중에서 월급이 가장 적은 사원이 근무하는 도시명

SELECT MIN(SALARY)
FROM EMPLOYEES;

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE SALARY = 2100;

SELECT LOCATION_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 50;

SELECT CITY
FROM LOCATIONS
WHERE LOCATION_ID = 1500;

----------------

SELECT CITY FROM LOCATIONS WHERE LOCATION_ID = 
(SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 
(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE SALARY = 
(SELECT MIN(SALARY) FROM EMPLOYEES)));

-- 5. 부서명이 IT인 부서에 근무하는 사원들의 모든 정보 출력

SELECT DEPARTMENT_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'IT';

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60;

----------------

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID =
(SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'IT');

-- 6. Employees 테이블에서 LAST_NAME이 Greenberg 사원보다 급여를 더 많이 받고 있는 사원들 정보 출력

SELECT SALARY 
FROM EMPLOYEES
WHERE LAST_NAME = 'Greenberg';

SELECT *
FROM EMPLOYEES
WHERE SALARY > 12008;

----------------------

SELECT * FROM EMPLOYEES WHERE SALARY >
(SELECT SALARY FROM EMPLOYEES WHERE LAST_NAME = 'Greenberg');

-- 7. 부서별 최소급여를 받고 있는 사원의 정보 출력

SELECT * FROM EMPLOYEES WHERE SALARY IN
(SELECT MIN(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);

-- 8. 도시이름이 'S'로 시작하는 지역에 근무하는 사원의 정보 출력
SELECT LOCATION_ID 
FROM LOCATIONS
WHERE CITY LIKE 'S%';

SELECT DEPARTMENT_ID
FROM DEPARTMENTS
WHERE LOCATION_ID IN (1400, 1500, 1600, 1700, 2200, 2300, 2600, 2800);

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (10, 30, 50, 60, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270);

----------------------

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN
(SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE LOCATION_ID IN
(SELECT LOCATION_ID FROM LOCATIONS WHERE CITY LIKE 'S%'));

-- 9. 성이 Austin 사원의 매니저(상사)가 근무하는 부서의 평균 급여보다 부서 평균이 더 큰 부서의 이름
SELECT MANAGER_ID 
FROM EMPLOYEES 
WHERE LAST_NAME = 'Austin';

SELECT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 103;

----------------------

SELECT *
FROM EMPLOYEES;

SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 100);

SELECT DEPARTMENT_NAME, FIRST_NAME
FROM DEPARTMENTS, EMPLOYEES;

---------------------------------
---- JOIN
-- 사원 번호가 100인 사원의 이름, 부서명 출력
SELECT E.FIRST_NAME, D.DEPARTMENT_NAME, D.DEPARTMENT_ID
FROM EMPLOYEES E
	INNER JOIN
	DEPARTMENTS D
	ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
WHERE E.EMPLOYEE_ID = 100;

-- 부서 번호가 30인 부서에 근무하는 사원의 정보(이름, 월급, 부서명, 부서 ID, 도시명, 나라명, 대륙명) 출력
SELECT E.FIRST_NAME, E.SALARY, D.DEPARTMENT_ID, D.DEPARTMENT_NAME, L.CITY, C.COUNTRY_NAME, R.REGION_NAME 
FROM DEPARTMENTS D
	INNER JOIN
	EMPLOYEES E
	ON (D.DEPARTMENT_ID = E.DEPARTMENT_ID)
	INNER JOIN 
	LOCATIONS L
	ON (D.LOCATION_ID = L.LOCATION_ID)
	INNER JOIN
	COUNTRIES C 
	ON (C.COUNTRY_ID = L.COUNTRY_ID)
	INNER JOIN 
	REGIONS R
	ON (R.REGION_ID = C.REGION_ID)
WHERE D.DEPARTMENT_ID = 30;

---- USING
-- 조인 조건 중 컬럼명이 같을 경우 사용
-- USING에 사용한 컬럼명은 사용 시 테이블명의 식별자를 사용하지 않음
SELECT E.FIRST_NAME, D.DEPARTMENT_NAME, DEPARTMENT_ID 
FROM EMPLOYEES E
	INNER JOIN
	DEPARTMENTS D
	USING(DEPARTMENT_ID)
WHERE E.EMPLOYEE_ID = 100;

-----
-- 30번 부서에 근무하는 사원들 중 가장 월급이 많은 사원의 월급보다 많이 받는 사원들의
-- 이름, 월급, 부서명, 도시명을 출력
SELECT E.FIRST_NAME, E.SALARY, D.DEPARTMENT_NAME, L.CITY
FROM EMPLOYEES E
	INNER JOIN
	DEPARTMENTS D 
	ON (D.DEPARTMENT_ID = E.DEPARTMENT_ID)
	INNER JOIN
	LOCATIONS L
	ON (L.LOCATION_ID = D.LOCATION_ID)
WHERE E.SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 30);

---- SELF JOIN
-- 사원들의 이름, 월급, 입사일, 매니저의 이름, 매니저의 월급, 매니저의 입사일 출력
SELECT E.FIRST_NAME, E.SALARY, E.HIRE_DATE, M.FIRST_NAME, M.SALARY, M.HIRE_DATE 
FROM EMPLOYEES E
	INNER JOIN
	EMPLOYEES M
	ON (E.MANAGER_ID = M.EMPLOYEE_ID);

-- Outer Join
-- 
부서명, 부서 관리자의 이름, 월급, 입사일
SELECT * FROM DEPARTMENTS;

SELECT D.DEPARTMENT_NAME, E.FIRST_NAME, E.SALARY , e.HIRE_DATE 
FROM EMPLOYEES E
	RIGHT JOIN
	DEPARTMENTS D
	ON (D.DEPARTMENT_ID) = (E.EMPLOYEE_ID)

------
-- 최소 급여가 8200, 최대 급여가 1600 사이에 속하는 job_titlle과 사원의 ID, 급여
SELECT * FROM JOBS;

SELECT E.EMPLOYEE_ID , E.SALARY, J.JOB_ID;
FROM EMPLOYEES E
	INNER JOIN
	JOBS J
	ON E.SALARY BETWEEN 8200 AND 16000;

-------------------------------------- DDL

-- Table 생성
CREATE TABLE TEST (
	NAME VARCHAR2(100), 
	NUM NUMBER,
	KOR NUMBER(3),
	AVG NUMBER(5,2)
);

SELECT * FROM TEST;

INSERT INTO TEST (NAME, NUM, KOR, AVG)
VALUES ('김철수', 1, 86, 45.7);

INSERT INTO TEST
VALUES ('김영희', 2, 77, 86.1);

ROLLBACK;

DROP TABLE TEST;

COMMIT;